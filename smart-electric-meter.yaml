---
substitutions:
  name: smart-electric-meter
  friendly_name: Smart Electric Meter
  device_static_ip: !secret smart_electric_meter_wifi_manual_ip_static_ip
  device_ap_ssid: !secret smart_electric_meter_wifi_ap_ssid
  device_ap_password: !secret smart_electric_meter_wifi_ap_password
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_manual_ip_gateway: !secret wifi_manual_ip_gateway
  wifi_manual_ip_subnet: !secret wifi_manual_ip_subnet
  mqtt_broker: !secret mqtt_broker
  mqtt_username: !secret mqtt_username
  mqtt_password: !secret mqtt_password
  mqtt_topic_prefix: tele/tasmota_3D87A3
  mqtt_discovery: "true"
  mqtt_lwt_topic_suffix: "/LWT"
  mqtt_lwt_online_payload: "Online"
  mqtt_lwt_offline_payload: "Offline"

  # UART Configuration
  uart_rx_pin: "D2"
  uart_baud_rate: "9600"
  uart_parity: "EVEN"
  uart_data_bits: "7"
  uart_stop_bits: "1"
  uart_rx_buffer_size: "1024"

  # Validation constants for meter readings
  max_realistic_power: "17250.0" # 17.25kW (25A * 3 phases * 230V)
  max_absolute_power: "34500.0" # 34.5kW (2x realistic power as absolute limit)
  max_power_change: "3000.0" # 3kW max power change per reading
  max_current_change: "13.0" # 13A max current change per reading (derived from 3kW/230V)
  max_energy_total: "100000.0" # 100,000 kWh reasonable lifetime maximum
  max_energy_change: "1.0" # 1 kWh max energy change per reading
  min_energy_value: "0.0" # Minimum energy value (kWh)
  min_power_value: "0.0" # Minimum power value (W)

  # OBIS codes for smart meter readings
  obis_total_consumption: "1-0:1.8.0*255" # Total energy consumption (kWh)
  obis_consumption_1d: "1-0:1.8.0*96" # Energy consumption last 1 day (kWh)
  obis_consumption_7d: "1-0:1.8.0*97" # Energy consumption last 7 days (kWh)
  obis_consumption_30d: "1-0:1.8.0*98" # Energy consumption last 30 days (kWh)
  obis_consumption_365d: "1-0:1.8.0*99" # Energy consumption last 365 days (kWh)
  # obis_total_feed_in: "1-0:2.8.0*255" # Total energy feed-in (kWh)
  obis_current_power: "1-0:16.7.0*255" # Current power consumption (W)

  # Additional OBIS codes for comprehensive meter reading
  obis_serial_number: "1-0:96.1.0*255" # Serial number/identification
  obis_consumption_t1: "1-0:1.8.1*255" # Energy consumption T1 (kWh)
  obis_consumption_t2: "1-0:1.8.2*255" # Energy consumption T2 (kWh)
  obis_voltage_l1: "1-0:32.7.0*255" # Voltage L1 (V)
  obis_voltage_l2: "1-0:52.7.0*255" # Voltage L2 (V)
  obis_voltage_l3: "1-0:72.7.0*255" # Voltage L3 (V)
  obis_current_l1: "1-0:31.7.0*255" # Current L1 (A)
  obis_current_l2: "1-0:51.7.0*255" # Current L2 (A)
  obis_current_l3: "1-0:71.7.0*255" # Current L3 (A)
  obis_phase_angle_ul2_ul1: "1-0:81.7.1*255" # Phase angle UL2:UL1 (deg)
  obis_phase_angle_ul3_ul1: "1-0:81.7.2*255" # Phase angle UL3:UL1 (deg)
  obis_phase_angle_il1_ul1: "1-0:81.7.4*255" # Phase angle IL1:UL1 (deg)
  obis_phase_angle_il2_ul2: "1-0:81.7.15*255" # Phase angle IL2:UL2 (deg)
  obis_phase_angle_il3_ul3: "1-0:81.7.26*255" # Phase angle IL3:UL3 (deg)
  obis_frequency: "1-0:14.7.0*255" # Network frequency (Hz)
  obis_consumption_since_reset: "1-0:1.8.0*100" # Energy since last reset (kWh)
  obis_firmware_version: "1-0:0.2.0*255" # Firmware version info
  obis_parameter_crc: "1-0:96.90.2*255" # Parameter CRC checksum
  obis_status_register: "1-0:97.97.0*255" # Status register

  # Additional validation constants
  max_voltage: "280.0" # 280V (max reasonable voltage)
  min_voltage: "0.0" # 0V (min voltage)
  max_current: "30.0" # 30A (max reasonable current)
  min_current: "0.0" # 0A (min current)
  max_frequency: "52.0" # 55Hz (max frequency)
  min_frequency: "48.0" # 45Hz (min frequency)
  max_phase_angle: "360.0" # 360° (max phase angle)
  min_phase_angle: "-360.0" # -360° (min phase angle)

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0

external_components:
  - source:
      type: local
      path: components

esp8266:
  board: d1_mini

preferences:
  flash_write_interval: 5min

# Enable debug logging
logger:
  level: INFO

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret smart_electric_meter_esp_ota_password

# WiFi, MQTT, and other packages
packages:
  wifi: !include packages/wifi.yaml
  wifi-signal-sensors: !include packages/wifi-signal-sensors.yaml
  wifi-diagnostic-sensors: !include packages/wifi-diagnostic-sensors.yaml
  factory-reset-button: !include packages/factory-reset-button.yaml
  mqtt: !include packages/mqtt.yaml
  mqtt-diagnostic-sensors: !include packages/mqtt-diagnostic-sensors.yaml
  electricity-meter: !include packages/device-configs/electricity-meter.yaml

captive_portal:

# Additional sensors for this device
sensor:
  # Nice to have: uptime sensor
  - platform: uptime
    name: "Uptime"
    id: uptime_sensor
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: true

# Reset communication quality counters for all systems
button:
  - platform: template
    name: "Reset All Communication Quality"
    id: reset_all_communication_quality
    icon: "mdi:refresh-circle"
    entity_category: diagnostic
    disabled_by_default: true
    on_press:
      - lambda: |-
          id(total_frames_received) = 0;
          id(corruption_count) = 0;
          id(mqtt_connect_counter) = 0;
          id(wifi_connect_counter) = 0;
          ESP_LOGI("meter", "All communication quality and connection counters reset");

# -----------------------------------------------------------------------------
# Handshake logic: keep the meter in printable IEC-62056-21 ASCII mode
# -----------------------------------------------------------------------------

# Never tested this, not sure this actually works, but added it here for reference for counters that
# require handshake before sending any data.

# script:
#   - id: meter_handshake
#     mode: queued
#     then:
#       # Give the UART some time after boot / Wi-Fi reconnects
#       - delay: 3s
#       # 1) "/?!\r\n" – enquiry according to IEC-62056-21
#       - uart.write: "/?!\r\n"
#       # 2) Wait for the meter to answer with the identification string
#       - delay: 300ms
#       # 3) ACK + mode/baud selector (0 6 0 => mode C, 9600 Bd, normal wait-time)
#       - lambda: |-
#           constexpr uint8_t ack[] = {0x06, '0', '6', '0', '\r', '\n'};
#           id(uart_bus).write_array(ack, sizeof(ack));

# # Execute once after every reboot and repeat regularly (meter falls back to
# # idle mode after a few minutes without traffic).

# on_boot:
#   priority: -10
#   then:
#     - script.execute: meter_handshake

# interval:
#   - interval: 15min
#     then:
#       - script.execute: meter_handshake

# Optionally, add a status LED (uncomment and set pin if desired)
# output:
#   - platform: gpio
#     pin: D4
#     id: status_led
# status_led:
#   pin:
#     number: D4
#     inverted: true
