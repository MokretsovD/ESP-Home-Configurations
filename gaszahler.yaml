---
substitutions:
  device_static_ip: !secret gaszahler_wifi_manual_ip_static_ip
  device_ap_ssid: !secret gaszahler_wifi_ap_ssid
  device_ap_password: !secret gaszahler_wifi_ap_password
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_manual_ip_gateway: !secret wifi_manual_ip_gateway
  wifi_manual_ip_subnet: !secret wifi_manual_ip_subnet

esphome:
  name: gaszahler
  friendly_name: GasZähler

esp8266:
  board: esp01_1m
  restore_from_flash: true

preferences:
  flash_write_interval: 5min

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret gaszahler_esp_api_encryption_key
  actions:
    - action: set_meter_pulses_value
      variables:
        new_meter_value: int
      then:
        - logger.log:
            format: "Trying to set pulses value to %d"
            args: [new_meter_value]
        - globals.set:
            id: total_pulses
            value: !lambda "return (new_meter_value);"
        - logger.log:
            format: "Current pulses value is %d"
            args: [id(total_pulses)]            

ota:
  - platform: esphome
    password: !secret gaszahler_esp_ota_password
    id: ota_esphome

packages:
  wifi: !include packages/wifi.yaml

captive_portal:

globals:
  - id: total_pulses
    type: int
    restore_value: true
    initial_value: '277753'  # hier kann der Gaszählerstand initialisiert werden

binary_sensor:
  - platform: gpio
    id: internal_pulse_counter
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
    name: "Live-Impuls"
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - lambda: id(total_pulses) += 1;
        # optional: für eine LED, die den Gaszählerpuls visualisiert
        - output.turn_on: led
    on_release:
      then:
        # optional: für eine LED, die den Gaszählerpuls visualisiert
        - output.turn_off: led
sensor:
  - platform: template
    name: "Gasverbrauch"
    device_class: gas
    unit_of_measurement: "m³"
    state_class: "total_increasing"
    icon: "mdi:fire"
    accuracy_decimals: 2
    lambda: |-
      return id(total_pulses) * 0.01;
    filters:
      or:
        - throttle: 5min
        - delta: 0.01
  - platform: template
    name: "Gesamtimpulse"
    state_class: "total_increasing"
    accuracy_decimals: 0
    lambda: |-
      return id(total_pulses);
    entity_category: diagnostic
    filters:
      or:
        - throttle: 5min
        - delta: 1
switch:
  - platform: restart
    name: "Gaszähler neu starten"
    id: restart_gaszahler
    icon: "mdi:restart"

time:
  - platform: sntp
    timezone: Europe/Berlin
    servers: 
      - !secret wifi_manual_ip_gateway
      - "0.pool.ntp.org"
      - "1.pool.ntp.org"
    on_time:
      - seconds: 0
        minutes: 0
        hours: 14
        days_of_week: SUN
        then:
          - logger.log: "Performing scheduled weekly restart"
          - switch.toggle: restart_gaszahler

# Optional: Diese LED soll blinken, sobald ein Signal vom Gaszähler erkannt wird
output:
  - platform: gpio
    pin: GPIO0
    id: 'led'
