---
substitutions:
  device_static_ip: !secret wasserstand_regenreservoir_wifi_manual_ip_static_ip
  device_ap_ssid: !secret wasserstand_regenreservoir_wifi_ap_ssid
  device_ap_password: !secret wasserstand_regenreservoir_wifi_ap_password
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_manual_ip_gateway: !secret wifi_manual_ip_gateway
  wifi_manual_ip_subnet: !secret wifi_manual_ip_subnet

esphome:
  name: wasserstand-regenreservoir
  friendly_name: wasserstand-regenreservoir

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret wasserstand_regenreservoir_esp_api_encryption_key

ota:
  - platform: esphome
    password: !secret wasserstand_regenreservoir_esp_ota_password
    id: ota_esphome

wifi: !include components/wifi.yaml

captive_portal:

# Example configuration entry
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    servers:
      - !secret wifi_manual_ip_gateway

# i2c Bus auf D1 und D2 konfigurieren
i2c:
  id: bus_a
  sda: D2
  scl: D1
  scan: true

# 1-Wire-Sensoren am Pin D4
# dallas:
#  - pin: D4

# ADC einrichten, ADDR-Pin ist auf VCC gelegt, daher Adresse 0x49
ads1115:
  - address: 0x49
    id: ads1115_49

# ADC Kanal A0 zur Messwerterfassung 
sensor:
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 4.096
    name: "Wasserstand Regenreservoir"
    id: levelraw
    update_interval: 2s
    unit_of_measurement: cm
    accuracy_decimals: 1
    icon: "mdi:car-coolant-level"
# Messwerte glätten:
    filters:
      - sliding_window_moving_average:
          window_size: 20
          send_every: 20
# Spannungen nach Messreihe in Füllhöhe umrechnen          
      - calibrate_linear:
          - 0.325 -> 0.0
          - 3.29 -> 200      
      - lambda: |-
         if (x < 0) return 0;
         return x;
      - or:
        - throttle: 5min
        - delta: 0.1    

# Füllmenge nach Füllstandskurve berechnen
  - platform: template
    name: "Volume Regenreservoir"
    lambda: |-
      return id(levelraw).state;
    
    filters:
      - calibrate_linear:
          - 0 -> 0
          - 1287 -> 4000
          - 2000 -> 6215
      - lambda: |-
         if (x < 0) return 0;
         return x;
      - or:
        - throttle: 5min
        - delta: 0.5  
    unit_of_measurement: l
    accuracy_decimals: 1

#    # 1-Wire Temperatursensor 

#  - platform: dallas
#    address: 0xef0516905a21ff28
#    name: "Zisterne Sens1"
#    unit_of_measurement: °C
#    accuracy_decimals: 1          